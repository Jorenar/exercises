\documentclass[12pt]{article}

\usepackage[a4paper, vmargin=20pt, hmargin=50pt, head=16pt, includehead]{geometry}


\usepackage[bottom]{footmisc}
\usepackage{algorithmic}
\usepackage{algorithm}
\usepackage{amsmath}     % math
\usepackage{amssymb}     % math symbols
\usepackage{ulem}
\usepackage{changepage}  % for the adjustwidth environment
\usepackage{enumitem}    % enumerate/list items
\usepackage{fancyhdr}    % header
\usepackage{fancyvrb}
\usepackage{mathtools}   % math tools
\usepackage{multicol}    % multiple columns
\usepackage{pgfplots}    % graphs
\usepackage{stackengine} % stacking objects vertically
\usepackage{tikz}
\usepackage{titlesec}    % alternative section titles
\usepackage{xcolor}      % color text

\newcommand\calculator{\tikz{
   \node (c) [inner sep=0pt, draw, fill=black, anchor=south west]{\phantom{N}};
   \begin{scope}[x=(c.south east),y=(c.north west)]
      \fill[white] (.1,.7) rectangle (.9,.9);
      \foreach \x in {.1, .33, .55, .79}{
         \foreach \y in {.1, .24, .38, .53}{
            \fill[white] (\x,\y) rectangle +(.11,.07);}}
   \end{scope} } }

\usepgfplotslibrary{fillbetween}

\newcommand{\Because}{\quad\because\quad}
\newcommand{\case}[1]{\textrm{#1$^\circ$}}
\newcommand{\ceil}[1]{\left\lceil #1 \right\rceil}
\newcommand{\degree}{^{\circ}}
\newcommand{\diff}{\mathop{}\!\mathrm{d}}
\newcommand{\floor}[1]{\left\lfloor #1 \right\rfloor}
\newcommand{\for}{\ \leftrightarrow\ }
\newcommand{\Integral}[4]{\int_{#1}^{#2} \! #3 \, \mathop{}\!\mathrm{d}#4}
\newcommand{\mathcolorbox}[2]{\colorbox{#1}{$\displaystyle #2$}}
\newcommand{\norm}[1]{\left\lVert#1\right\rVert}
\newcommand{\qed}{\textbf{\textit{QED}}}
\newcommand{\qef}{\textbf{\textit{QEF}}}
\newcommand{\task}[1]{\textit{#1}}
\newcommand{\xrowht}[2][0]{\addstackgap[.5\dimexpr#2\relax]{\vphantom{#1}}}

\let\oldref\ref \renewcommand{\ref}[1]{\mathrm{(\oldref{#1})}}

\DeclareMathOperator{\?}{?}
\DeclareMathOperator{\ave}{ave}
\DeclareMathOperator{\dom}{dom}
\DeclareMathOperator{\im}{im}
\DeclareMathOperator{\lin}{lin}
\DeclareMathOperator{\N}{\mathbb{N}}
\DeclareMathOperator{\R}{\mathbb{R}}
\DeclareMathOperator{\sgn}{sgn}
\DeclareMathOperator{\var}{var}
\DeclareMathOperator{\Z}{\mathbb{Z}}

\let\oldepsilon\epsilon \renewcommand{\epsilon}{\varepsilon}

\counterwithin*{equation}{section}  % reset equation counter after each section
\titleformat{\section}{\normalfont\Large\bfseries}{}{0pt}{} % remove section numbering

\let\stdsection\section  \renewcommand\section{\newpage\stdsection} % each section on new page

\setlength{\parskip}{0.5em}
\setlength{\parindent}{0em}

\setlist[itemize]{noitemsep, topsep=0pt}   % don't add space before itemize
\setlist[enumerate]{noitemsep, topsep=0pt} % don't add space before enumerate

\pagestyle{fancy}

\renewcommand{\sectionmark}[1]{ \markright{#1}{} }

\chead{Algorytmy i struktury danych}
\lhead{Jakub Łukasiewicz}
\rhead{\rightmark}

\begin{document}
\section{Zadanie 1a}
Obliczyć złożoność oczekiwaną algorytmu wyszukiwania binarnego podanego
poniżej oraz wariancję tej złożoności

\begin{Verbatim}[numbers=left]
   int x;          // wartość szukanego elementu
   int l = 0;      // indeks pierwszego elementu w tablicy
   int p = n;      // indeks ostatniego elementu w tablicy
   int dane[1..p]; // tablica uporządkowanych elementów od 1 do p

   while (l <= p)
       m = (l+p)/2;
       if (dane[m] == x) return x;
       if (dane[m] < x)  p = m-1;
       if (dane[m] > x)  l = m+1;

   return -1;
\end{Verbatim}

\subsection*{Rozwiązanie}

Niech ciąg $X_n$ reprezentuje daną tablicę długości $n$

Złożoność średnią określamy wzorem:
\begin{equation*}
   A(n) = \ave{X_n} = P'(1)
\end{equation*}

A wariację:
\begin{equation*}
   \var{X_n} = P''(1) + P'(1) - P'(1)^2
\end{equation*}

Dla:
\begin{equation*}
   P(1) = \sum_{i \ge 0} p_{i,n}x^i
\end{equation*}

Gdzie $p_{i,n}$ oznacza prawdopodobieństwo, że nasz algorytm przy $n$ danych
wykona $i$ kroków.

Przyjmując $n = 2^h-1 \for h > 0$ za rozmiar danych \footnote{co generalnie nie
wpływa na klasę funkcji w rozwiązaniach dla innych $n$}, to prawdopodobieństwo:
\begin{equation*}
   p_{i,n} = \left\{ \begin{array}{ll}
      \frac{2^{i-1}}{n} & \for 1 \le i \le h \\
      0                 & \for i < 1 \ \ \textrm{\footnotesize$\lor$}\ \ i > h
   \end{array} \right.
\end{equation*}

Zatem wielomian:
\begin{equation*}
   P(x) = \sum_{i=1}^h \frac{2^{i-1}}{n} x^i
   = \frac{1}{n} \sum_{i=1}^h 2^{i-1} x^i
   = \frac{1}{2n} \sum_{i=1}^h 2^i x^i
\end{equation*}

Pochodne:
\begin{equation*}
   P'(x) = \frac{1}{2n} \sum_{i=1}^h 2^i i x^{i-1}
\end{equation*}

\begin{equation*}
   P''(x) = \frac{1}{2n} \sum_{i=1}^h 2^i i(i-1) x^{i-2}
\end{equation*}

Dodatkowo:
\begin{equation*}
   n = 2^h - 1 \implies 2^h = n + 1 \implies h = \log_2 (n+1)
\end{equation*}

Podstawiając $x=1$ pod pochodne:
%
\begin{equation} \label{p'1}
   \begin{aligned}
      P'(1) &= \frac{1}{2n} \sum_{i=1}^h 2^i i \overset{\ \calculator\ }{=}
      \frac{2(2^h h - 2^h + 1)}{2n} = \frac{2^h h - 2^h + 1}{n} = \\[0.5em]
      &= \frac{2^{\log_2 (n+1)} \log_2 (n+1) - 2^{\log_2 (n+1)} + 1}{n}
      = \frac{(n+1) \log_2 (n+1) - (n+1) + 1}{n} =\\
      &= \frac{(n+1) \Big(\log_2 (n+1) - 1 \Big) + 1}{n}
   \end{aligned}
\end{equation}

\begin{equation}
   \begin{aligned}
      P''(1) &= \frac{1}{2n} \sum_{i=1}^h 2^i i(i-1)
      \overset{\ \calculator\ }{=}
      \frac{2 (2^h h^2 - 3 \cdot 2^h h + 2^{h + 2} - 4)}{2n} =
      \frac{2^h h^2 - 3 \cdot 2^h h + 2^{h + 2} - 4}{n}
   \end{aligned}
\end{equation}

W notacji asymptotycznej $\ref{p'1}$ można uprościć:
\begin{equation*}
   \ref{p'1} \quad\to\quad
   \frac{n (\log{n} - 1 )}{n} \quad\to\quad
   \log{n}
   \implies A(n) = \Theta(\log{n})
\end{equation*}

Wariancja:
\begin{equation*}
   \begin{aligned}
      \var{X_n} &=
      \frac{2^h h^2 - 3 \cdot 2^h h + 2^{h + 2} - 4}{n} +
      \frac{2^h h - 2^h + 1}{n} - \left(\frac{2^h h - 2^h + 1}{n} \right)^2 =\\[0.5em]
      &=
      \frac{2^h h^2 - 2 \cdot 2^h h + 2^{h + 2} - 3 - 2^h}{n} - \left(\frac{2^h h - 2^h + 1}{n} \right)^2 =\\[0.5em]
      &=\frac{2^h (h^2 - 2 h + 2^2 - 1)- 3 }{n} - \left(\frac{2^h h - 2^h + 1}{n} \right)^2 =\\[0.5em]
      &=\frac{2^h (h^2 - 2 h + 3)- 3 }{n} - \left(\frac{2^h h - 2^h + 1}{n} \right)^2 = ...
   \end{aligned}
\end{equation*}

\subsection*{Odpowiedź}
\vspace{-2em}
\begin{align*}
   A(n)      & = \Theta(\log{n}) \\
   \var{X_n} & = 3 \pm \left( \frac{\log^2 n}{n} \right)
\end{align*}

\section{Zadanie 1b}

Wymyślić algorytm na odnajdywanie duplikatów w ciągu $n$-nieuporządkowanych
elementów, działający w czasie $O(n \log n)$.

\subsection*{Rozwiązanie}

Zakładamy, że "znalezienie duplikatów" polega wyłącznie na wypisaniu wartości
występujących w tablicy więcej niż raz.

W takim przypadku nie zależy nam na pozycjach w tablicy, więc wystarczy wpierw
ją posortować algorytmem o czasie $O(n \log n)$, a następnie wyszukać elementy
w czasie liniowym, ponieważ:
\begin{equation*}
   O(n \log n) + O(n) = O(n \log n)
\end{equation*}

Ponieważ nie musimy przejmować się również stabilnością, ani złożonością pamięciową,
za algorytm sortowania wybierzmy taki, który wszystkie czasy ma maksymalnie
$O(n \log n)$.  Ten warunek spełnia \textit{sortowanie przez scalanie} oraz
\textit{sortowanie przez kopcowanie}.

Niech $A$ będzie naszą tablicą o rozmiarze $n$. Algorytm zapisany w pseudokodzie:

\begin{algorithm}
   \caption{Wypisywanie duplikatów}
   \begin{algorithmic}
      \STATE {sort($A$, $n$)} \quad\COMMENT{wykonuje dalej MergeSort lub HeapSort}
      \STATE
      \STATE {$i \gets 1$}
      \WHILE {$i \leq n-1$}
      \IF {$A[i] \ne A[i+1]$ \AND $A[i] = A[i-1]$}
      \PRINT {$A[i]$}
      \ENDIF
      \STATE {$i \gets i + 1$}
      \ENDWHILE
      \STATE
      \IF {$n > 1$ \AND $A[n] = A[n-1]$}
      \PRINT {$A[n]$}
      \ENDIF
   \end{algorithmic}
\end{algorithm}

\section{Zadanie 1c*}
Utworzyć zbiór danych dla algorytmu QuickSort z wyborem pierwszego elementu
w ciągu jako elementu dzielącego, dla których to sortowanie działa w czasie
optymalnym. Obliczyć złożoność optymalną dla sortowania QuickSort.

\subsection*{Rozwiązanie}

Najlepszym przypadkiem jest taki, gdy dokonuje się najrówniejszy podział.
Otrzymujemy wtedy dwa podproblemy o rozmiarach nie większych niż $\frac{n}{2}$,
gdyż jeden jest wielkości $\floor{\frac{n}{2}}$, a drugi $\ceil{\frac{n}{2}}-1$.

Równanie rekurencyjne przyjmuje wówczas postać:
\begin{equation*}
   T(n) = 2T\left(\frac{n}{2}\right) + \Theta(n)
\end{equation*}

Z \textit{twierdzenia o rekurencji uniwersalnej}:
\begin{equation*}
   T(n) = \Theta(n^{\log_2{2}} \log{n}) = \Theta(n \log{n}) \Because \Theta(n) = \Theta(n^{\log_2{2}})
\end{equation*}

Stwórzmy tablicę z liczb $\{ 1,2,3,4,5,6,7,8,9 \}$:

Pivot ma być na pierwszym miejscu, więc umieśćmy tam liczbę 5, gdyż jest to mediana zbioru.
\begin{figure}[h!]
   \centering
   \begin{BVerbatim}
   5 ____ ____
   \end{BVerbatim}
\end{figure}

Na pierwszym miejscu podtablicy odpowiednio $3$ i $8$:
\begin{figure}[h!]
   \centering
   \begin{BVerbatim}
   5 3 __ _ 8 __ _
   \end{BVerbatim}
\end{figure}

Ostatecznie:
\begin{figure}[h!]
   \centering
   \begin{BVerbatim}
   5 3 2 1 4 8 7 6 9
   \end{BVerbatim}
\end{figure}

\subsection*{Odpowiedź}

Tablica: \texttt{5 3 2 1 4 8 7 6 9}

Złożoność: $\Theta(n \log{n})$

\section{Zadanie 2a}

Wykorzystując metodę szeregów (funkcji tworzących) obliczyć złożoność optymalną,
pesymistyczną \sout{i średnią oraz wariancję} dla algorytmu sortowania przez wstawianie.

\subsection*{Rozwiązanie}

\subsubsection*{Przypadek optymistyczny}

Przypadek pesymistyczny występuje, gdy zestaw danych jest już posortowanych.
Nastąpi wówczas tylko jedno przejście przez tablicę, czyli dokładnie $n-1$ kroków.
Zatem:
\begin{equation*}
   p_{i,n} = \left\{ \begin{array}{ll}
      1 & \for i = n-1 \\
      0 & \for i \ne n-1
   \end{array} \right.
\end{equation*}

Funkcja generująca ma zatem postać $P(x) = x^{n-1}$. Natomiast pochodna:
\begin{equation*}
   P'(x) = (n-1)x^{n-1-1} = (n-1)x^{n-2}
\end{equation*}

Zatem:
\begin{equation*}
   \mathrm{Opt.}(n) = P'(1) = (n-1)1^{n-2} = n-1 = \mathrm{O}(n)
\end{equation*}

\subsubsection*{Przypadek pesymistyczny}

Przypadek pesymistyczny występuje, gdy sortowany jest zestaw danych posortowanych
w odwrotnej kolejności. W trakcie działania tego algorytmu zostanie wykonanych
wtedy dokładnie $\frac{1}{2}n(n - 1)$ kroków. Zatem:

\begin{equation*}
   p_{i,n} = \left\{ \begin{array}{ll}
      1 & \for i = \frac{1}{2}n(n-1) \\[0.5em]
      0 & \for i \ne \frac{1}{2}n(n-1)
   \end{array} \right.
\end{equation*}

Funkcja generująca ma zatem postać $P(x) = x^{\frac{n(n-1)}{2}}$. Natomiast pochodna:
\begin{equation*}
   P'(x) = \frac{n^2 - n}{2} x^{ \frac{n^2-n}{2} - 1} = \frac{n^2 - n}{2} x^{ \frac{n^2 - n -2}{2} }
\end{equation*}

Zatem:
\begin{equation*}
   W(n) = P'(1) = \frac{n^2 - n}{2} 1^{ \frac{n^2 - n -2}{2} } = \frac{n^2 - n}{2} = \mathrm{O}(n^2)
\end{equation*}

\subsection*{Odpowiedź}
\begin{equation*}
   \mathrm{Opt.}(n) = \mathrm{O}(n)
\end{equation*}
\begin{equation*}
   W(n) = \mathrm{O}(n^2)
\end{equation*}

\section{Zadanie 3}
Wykorzystując metodę kompresji (złożoność Kołmogorowa) jak najdokładniej oszacować
średnią złożoność jednego z algorytmów sortowań typu sortowania: przez wybieranie,
przez wstawianie lub QuickSort.

\subsection*{Rozwiązanie}

Wybrany algorytm: sortowanie przez wstawianie

Zakładamy, że tablica ma $n$ różnych elementów. Zatem z kombinatoryki wiemy, że
istnieje $n!$ możliwych ustawień tych elementów.

Wyjściową permutację opiszemy podając ciąg liczb \ $d_1, d_2, \dots, d_n$, \ gdzie
$d_i$ oznacza ilość elementów większych poprzedzających element bieżący $i$.

Niech $T$ to zbiór wszystkich transpozycji dokonanych przez algorytm
oraz $M = \sum_{i=1}^n d_i$ (oznaczmy to równanie jako X).

Zauważmy, że $\#T \ge M$, gdyż każda transpozycja zmienia liczbę inwersji o jeden.

\vspace{1em}

Kodujemy liczbę $M$ w postaci:

\begin{equation*}
   \underbrace{11 \dots 11}_{\underset{\mathrm{bit}}{\ceil{\log_2 \log_2 M}}}
   \ \
   \underbrace{0}_{\underset{\mathrm{bit}}{1}}
   \ \
   \underbrace{\ceil{\log_2 M}}_{\underset{\mathrm{bit}}{\ceil{\log_2 \log_2 M}}}
   \quad
   \underbrace{M}_{\underset{\mathrm{bit}}{\ceil{\log_2 M}}}
\end{equation*}

Dzięki takiemu rozwiązaniu bez problemu odczytamy liczbę $M$ jeśli będzie na
początku w kodzie. Najpierw odczytujemy $\ceil{\log_2 \log_2 M}$ jedynek, dzięki
temu wiemy ile miejsca zajmuje zapis $\ceil{\log_2 M}$ długości. Odczytujemy tą
długość a następnie odczytujemy samą liczbę $M$ jak już wiemy ile bitów zajmuje
jej zapis.

Zatem na zakodowanie $M$ potrzebne będzie
$\ceil{\log_2 \log_2 M} + 1 + \ceil{\log_2 \log_2 M} + \ceil{\log_2 M}$ bitów.

\vspace{1em}

Teraz kodujemy ciąg $d_1, d_2, \dots, d_n$.

Równanie X ma $ \binom{M + n - 1}{n - 1} $ rozwiązań w~zbiorze~$\N$.
Stąd wynika, że przypisując każdemu z rozwiązań kolejne liczby potrzebujemy
maksymalnie $ \ceil{\log_2 \binom{M+n-1}{n-1}} $ bitów na zapisanie konkretnego
numeru rozwiązania.

\vspace{1em}

Całość zakodowanej permutacji będzie wyglądała zatem następująco:
\begin{equation*}
   \underbrace{11 \dots 11}_{\underset{\mathrm{bit}}{\ceil{\log_2 \log_2 M}}}
   \ \
   \underbrace{0}_{\underset{\mathrm{bit}}{1}}
   \ \
   \underbrace{\ceil{\log_2 M}}_{\underset{\mathrm{bit}}{\ceil{\log_2 \log_2 M}}}
   \quad
   \underbrace{M}_{\underset{\mathrm{bit}}{\ceil{\log_2 M}}}
   \quad
   \underbrace{\mathrm{nr\ rozw.\ X}}_{\underset{\mathrm{bit}}{\ceil{\log_2 \binom{M+n-1}{n-1}}}}
\end{equation*}

Zatem potrzebne jest
$1 + \ceil{\log_2 M} + 2 \cdot \ceil{\log_2 \log_2 M} +
\ceil{
   \log_2
   \binom{M+n-1}{n-1}
}
$
bitów na zapisanie permutacji wyjściowej.

\vspace{1em}

Z twierdzenia o długości kodu wiemy, że dla co najmniej $(1-c)n!$ permutacji zachodzi
\begin{equation*}
   1 + \ceil{\log_2 M} + 2 \cdot \ceil{\log_2 \log_2 M} + \ceil{ \log_2 \binom{M+n-1}{n-1} } \ge \log_2 (cn!)
\end{equation*}

Co możemy przekształcić do:
\begin{equation*}
   \ceil{ \log_2 \binom{M+n-1}{n-1} } \ge \log_2 (cn!) - 2 \cdot \ceil{\log_2 \log_2 M} - \ceil{\log_2 M} - 1
\end{equation*}

Ponieważ liczba inwersji dla każdego elementu jest nie większa niż $n$ i ilość
elementów wynosi $n$, to suma $M$ szacuje się od góry przez $n^2$.
Korzystając z tego oszacowania otrzymujemy:

\begin{equation*}
   \begin{aligned}
      \log_2 \binom{M+n-1}{n-1} & \ge \log_2 (cn!) - 2 \cdot \log_2 \log_2 n^2 - \log_2 n^2 - 1 \\
      \log_2 \binom{M+n-1}{n-1} & \ge \log_2 (cn!) - O(\log_2 n) \\
      \log_2 \binom{M+n-1}{n-1} & \ge \log_2 c + \log_2 n! - O(\log_2 n)
   \end{aligned}
\end{equation*}

Następnie skorzystamy ze wzoru Stirlinga \ $n! \approx \left(\frac{n}{e}\right)^n \sqrt{2\pi n} (1+o(1)) $

\begin{equation*}
   \begin{aligned}
      \log_2 \binom{M+n-1}{n-1} & \ge \log_2 c + \log_2 n! - O(\log_2 n) \\
      & \ge \log_2 c + log_2 \left(\left(\frac{n}{e}\right)^n \sqrt{2\pi n} (1+o(1)) \right) - O(\log_2 n) \\
      & \ge \log_2 c + log_2 \left(\left(\frac{n}{e}\right)^n \sqrt{2\pi n}) \right) - O(\log_2 n) \\
      \\
      \log_2 \binom{M+n-1}{n-1} & \ge \log_2 c + n \log_2 n - n \log_2 e + \frac{1}{2}\log_2 n + \frac{1}{2}\log_2 2\pi - O(\log_2 n) \\
      \log_2 \binom{M+n-1}{n-1} & \ge \log_2 c + n \log_2 n - n \log_2 e - O(\log_2 n)
   \end{aligned}
\end{equation*}

Natomiast oszacowanie $\left(\frac{me}{k}\right)^k > \binom{m}{k}$ daje nierówność:

\begin{equation*}
   \begin{aligned}
      \log_2 \left(\frac{(M+n-1)e}{n-1}\right) & \ge \log_2 \binom{M+n-1}{n-1} \\
      (n-1)\log_2 (M+n-1) + (n-1)\log_2 e - (n-1)\log_2(n-1) & \ge \log_2 \binom{M+n-1}{n-1} \\
      n\log_2 (M+n) + n\log_2 e - n\log_2(n-1) + \log_2(n-1) & \ge \log_2 \binom{M+n-1}{n-1}
   \end{aligned}
\end{equation*}

Kombinując dwie poprzednie nierówności dostaniemy:
\begin{equation*}
   n\log_2 (M+n) + n\log_2 e - n\log_2(n-1) + \log_2(n-1) \ge \log_2 c + n \log_2 n - n \log_2 e - O(\log_2 n)
\end{equation*}

Skąd:
\begin{equation*}
   n\log(M+n) \ge \log_2 c + n\log_2 \big(n(n-1)\big) - n\log_2 e^2 - O(\log_2 n)
\end{equation*}

Podstawiając $c=\frac{1}{n}$ do tej nierówności i dzieląc obustronnie przez $n$ otrzymamy:

\begin{equation*}
   \begin{aligned}
      \log(M+n) & \ge \frac{\log_2 n^{-1}}{n} + \log_2 \big(n(n-1)\big) - \log_2 e^2 - O\left(\frac{\log_2 n}{n}\right) \\
      & \ge \log_2 \big(n(n-1)\big) - \log_2 e^2 - o(1) \\
      \\
      \log(M+n) & \ge \log_2 \frac{n(n-1)}{e^2} - o(1)
   \end{aligned}
\end{equation*}

Z czego wynika:
\begin{equation*}
   M \ge \frac{n(n-1)}{e^2} - o(1) \implies M \ge \frac{n^2}{e^2} - O(n)
\end{equation*}

Zatem dla co najmniej $(1-c)n!$ permutacji algorytm sortowania przez wstawianie
wykonuje \mbox{$|T| \ge \frac{n^2}{e^2} - O(n)$} transpozycji.

A to daje dolne oszacowanie na średnią ilość transpozycji:

\begin{equation*}
   \frac{cn!\cdot 0 + (1-c)n! \cdot \left(\frac{n^2}{e^2} - O(n)\right)}{n!} =
   (1-c) \left(\frac{n^2}{e^2} - O(n)\right) =
   \left(1-\frac{1}{n}\right) \left(\frac{n^2}{e^2} - O(n)\right)
\end{equation*}

\subsection*{Odpowiedź}

\begin{equation*}
   A(n) = \left(\frac{n}{e}\right)^2 - O(n)
\end{equation*}

\end{document}
