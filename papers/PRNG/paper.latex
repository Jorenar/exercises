\documentclass[12pt]{extarticle}

\usepackage[
    a4paper,
    vmargin=10pt,
    headheight=16pt,
    hmargin=50pt,
    includehead,
    includefoot
]{geometry}

\usepackage[bottom]{footmisc}

\usepackage{enumitem}
\usepackage{changepage}
\usepackage{float}

\usepackage{graphicx}

\usepackage{amsmath}
\usepackage{amssymb}
\usepackage{latexsym}

\usepackage{algorithmic}

\usepackage{academicons}

\usepackage{fancyhdr}
\usepackage{hyperref}

\usepackage{xcolor}
\definecolor{idcolor}{HTML}{A6CE39}

\usepackage{tcolorbox}
\usepackage{multicol}

\usepackage{pgfplots} % {{{
\usepackage{pgfplotstable}

\pgfplotsset{compat = newest}

\usepackage{tikz}
\usetikzlibrary{calc}

\tikzset{
    caption/.style={
        execute at end picture={\path
        let \p1=($(current bounding box.east)-(current bounding box.west)$) in
        (current bounding box.south) node[below,text width=\x1-4pt,align=center]
        {#1}; }}}

\usepackage{caption}

% }}}

\usepackage{listings}
\lstdefinestyle{mystyle}{
    basicstyle=\ttfamily\small,
    breakatwhitespace=false,
    breaklines=true,
    captionpos=b,
    keepspaces=true,
    numbersep=5pt,
    showspaces=false,
    showstringspaces=false,
    showtabs=false,
    tabsize=4 }
\lstset{style=mystyle}

\usepackage[
    backend=bibtex,
    urldate=iso,
    date=iso,seconds=true,
]{biblatex}
\bibliography{references.bib}
\renewcommand*{\bibfont}{\footnotesize}


\title{A brief overview of pseudo-random number generators and testing of our own simple generator}
\author{Jakub Łukasiewicz}
\date{\today}


\pagestyle{fancy}
\rhead{\nouppercase\leftmark}

\setlength{\parindent}{0em}
\emergencystretch=1em
\setitemize[1]{noitemsep,topsep=2pt,parsep=0pt,partopsep=0pt}

\providecommand{\keywords}[1] { \small\textbf{\textbf{Keywords:}} #1 }

\newcommand{\for}{\ \leftrightarrow\ }
\renewcommand{\ge}{\geqslant}
\renewcommand{\le}{\leqslant}

\newcommand*{\equal}{=}

\newcommand{\drawGraphs}[2][]{
    \begin{figure}[H]
        \centering
        \begin{tikzpicture}[caption=$N \equal 100$]
            \begin{axis}[ ybar, ymin=0, ticks=none, width=0.4\textwidth, #1 ]
                \addplot file[skip first] {out/data/#2100.dat};
            \end{axis}
        \end{tikzpicture}
        \begin{tikzpicture}[caption=$N \equal 1000$]
            \begin{axis}[ ybar, ymin=0, ticks=none, width=0.4\textwidth, #1 ]
                \addplot file[skip first] {out/data/#21000.dat};
            \end{axis}
        \end{tikzpicture}
        \begin{tikzpicture}[caption=$N \equal 100000$]
            \begin{axis}[ ybar, ymin=0, ticks=none, width=0.4\textwidth, #1 ]
                \addplot file[skip first] {out/data/#2100000.dat};
            \end{axis}
        \end{tikzpicture}
    \end{figure} }

\begin{document}
% Title page
\makeatletter
\begin{titlepage}
    \centering

    {\huge\bfseries \@title \par}

    \vspace{2cm}
    {\Large\itshape \@author\/ \par}

    \vspace{0.5em}
    {\color{idcolor}\aiOrcid} \url{https://orcid.org/0000-0002-4938-504X}

    \vspace{2em}
    {\large \@date\par}

    \vspace{5em}

    \begin{abstract}
        Most random numbers used in computer programs are pseudorandom, which means they are
        generated in a predictable fashion using a mathematical formula. This is acceptable
        for many purposes, sometimes even desirable.

        In this paper we will take a look at few popular generators producing pseudorandom
        integers from continuous uniform distribution. Then we will use such generator to
        try to implement a generator producing numbers from interval~$\left]0,1\right[$~.
        And then, on its basis, generators of numbers from Bernoulli, binomial, Poisson,
        exponential and normal distributions.
    \end{abstract}

    \vspace{1em}
    \keywords{overview, pseudo, random, number, generator, testing}

    \vfill
\end{titlepage}
\makeatother

\tableofcontents
\clearpage

\section{Introduction}

\textit{Random numbers generators} (RNGs) are needed for practically all kinds of computer
applications, such as simulation of stochastic systems, numerical analysis, probabilistic
algorithms, secure communications, computer games, and gambling machines, to name
a~few.~\cite{LEcuyer2007}

\vspace{1em}

One way of achieving randomness is by using entropy of the ``outside'' world. For example,
in the 1940’s one could get a large deck of punched cards filled with random sampling
digits. Those cards could be placed in the data section of a~program.~\cite{LEcuyer2017}

However for many use cases reading random numbers from other external storage devices was
too slow and the size of main memory was much too limited to store large tables of random
digits. Thus two types of solutions emerged to produce random numbers on the fly, in real
time:

\begin{itemize}
    \item using a fast physical device that produces/collects random noise
    \item a purely deterministic algorithm producing a sequence \textit{imitating} randomness.
\end{itemize}

\section{Definition} \label{definition}

\textbf{\textit{Pseudorandom number generator}} \footnote{also referred to as:
\textit{deterministic random bit generator} (DRBG) \cite{nistGlossary}} (PRNG)
-- a deterministic algorithm that has one or more inputs called "seeds", and it
outputs a sequence of values that appears to be random.~\cite{nistGlossary}

\subsection{Mathematical definition (L'Ecuyer)}

A \textit{generator} is a structure $\mathcal{G} = (S, s_0, T, U, G)$, where $S$ is a
finite set of \textit{states}, $s_0 \in S$ is the \textit{initial state} (\textit{seed}),
$T: S \to S$ is the \textit{transition function}, $U$ is a finite set of \textit{output}
symbols and~$G: S \to U$~is the \textit{output function}. A generator operates as follows:
\begin{adjustwidth}{1em}{}
    Start from the seed $s_0$ and let $u_0 := G(s_0)$. Then, for $i := 1, 2, \dots $
    let~\mbox{$s_i = T(s_{i-1})$} and~\mbox{$u_i = G(s_i) \in U$}. We assume that efficient
    procedures are available to compute $T$ and $G$. The sequence $\{ u_i \}$ is the output
    of the generator and its elements are called the \textit{observations}. For pseudorandom
    number generators, one would expect the observations to behave from the outside
    as if they were the values of independent and identically random variables, uniformly
    distributed over $U$. The set $U$ is often a set of integers of the form
    $\{ 0, \dots, m-1 \}$ or~a~finite set of values between $0$ and $1$ to
    approximate the $U(0,1)$ distribution.~\cite{LEcuyer1994}
\end{adjustwidth}

\subsubsection*{Period and transient}

Since $S$ is finite, the sequence of states is ultimately periodic. The \textit{period}
is the smallest positive integer $\rho$ such that $s_{\rho+n} = s_n$ for some integer
$\tau \ge 0$ and for all $n \ge \tau$.  The smallest $\tau$ with this property is called
\textit{transient}. When $\tau = 0$, the sequence is said to be
\textit{purely periodic}.~\cite{LEcuyer1994}

\section{Examples of existing PRNG}
\subsection{\textit{Middle-square method}}

The method was invented by John von Neumann, and was described at a conference
in~1949.~\cite{vonNeumann1951}

\vspace{1em}

To generate a sequence of $n$-digit pseudorandom numbers, an $n$-digit seed is created and
squared, producing a $2n$-digit number. If the result has fewer than $2n$ digits, leading
zeroes are added to compensate. The middle $n$ digits of the result would be the next
number in the sequence, and returned as the result. This process is then repeated to
generate more numbers.~\cite{vonNeumann1951,psb_infRGN}

\subsection{\textit{Linear congruential generator} (LCG)}

By far one of the most popular random number generators in use today are special
cases of the following scheme, introduced by D. H. Lehmer in 1949.~\cite{lehmer49}

As we read in \cite{taocp2}, to create LCG we need four integers:
\begin{itemize}
    \item \parbox{7em}{the modulus $m$}    ($0 < m$)
    \item \parbox{7em}{the multiplier $a$} ($0 \le a < m$)
    \item \parbox{7em}{the increment $c$}  ($0 \le c < m$)
    \item \parbox{7em}{the seed $X_0$} ($0 \le X_0 < m$)
\end{itemize}
The desired sequence of random numbers is then obtained by setting:
\begin{equation} \label{eq:lcg}
    X_{n+1} = (a \cdot X_n + c) \mod m
\end{equation}

\subsubsection{\textit{Lehmer random number generator}}

The special case of \eqref{eq:lcg} with $c = 0$ deserves explicit mention, since it's
Lehmer's original method (and the number generation process is a little
faster~\cite{taocp2}).

\begin{equation}\label{eq:lehmer}
    X_{k+1} = a \cdot X_k \mod m
\end{equation}

The terms \textit{multiplicative congruential method} and \textit{mixed congruential
method} are used by many authors to denote linear congruential sequences respectively
with $c = 0$ and $c \ne 0$.

\subsection{\textit{Lagged Fibonacci generator} (LFG)}

\textit{Fibonacci Generators} is a class of random number generator aimed at being an
improvement on the ``standard'' linear congruential generator.
These are based on a generalisation of the Fibonacci sequence, hence the formula:
\begin{equation*}
    X_n = (X_{n-1} + X_{n-2}) \mod m \quad \for n \ge 2
\end{equation*}

Fibonacci Generator has good quality compared to other linear generators, but requires
much more computations. The disadvantage of this generator are high correlations between
the elements of the sequence. The sequences satisfy the decomposition condition but do not
satisfy the independence condition. This disadvantage can be eliminated by generalizing
the formula to a form called \textit{lagged Fibonacci generator} (LFG):
\begin{equation}\label{eq:lfg}
    X_n = (X_{n-p} \ \Diamond\ X_{n-q}) \mod m \quad \for n \ge p > q \ge 1
\end{equation}
where $\Diamond$ is some mathematical operator (e.g. addition, subtraction, XOR).~\cite{wiki:genFib}

\subsection{\textit{Linear-feedback shift register} (LFSR)}

LFSR is a shift register whose input bit is a linear function of its previous state.

Robert C. Tausworthe in 1965 defined~\cite{LEcuyer2017, tausworthe} LFSR generator via
\begin{equation}\label{eq:lsfr}
    \begin{aligned}
        X_n &= (a_1 X_{n-1} + \dots + a_k X_{n-k}) \mod 2 \\
        u_i &= \sum_{l=1}^w \frac{X_{is + l - 1}}{2^l}
    \end{aligned}
\end{equation}
where $a_1,\dots,a_k \in \mathbb{F}_2,a_k = 1$ ($\mathbb{F}_2$ is \textit{Galois field})
and $w$, $s$ are positive integers.
It takes a block of $w$ successive bits every $s$ steps of the linear recurrence
and constructs the output $u_i$ from that.

\subsubsection{\textit{Generalized feedback shift register} (GFSR)}

GFSR generator~\cite{lewis} is a widely used pseudorandom number generator based on the
linear recurring equation:
\begin{equation}\label{eq:gfsr}
    X_{l+n} = X_{l+m} \oplus X_l \quad \for l \ge 0
\end{equation}
where each $X_l$ is a word with components 0 or 1 of size $w$, and $\oplus$ denotes bitwise
exclusive-or operation.~\cite{tgfsr1}

\subsection{ACORN}

\textit{\textbf{A}dditive \textbf{Co}ngruential \textbf{R}andom \textbf{N}umber} (ACORN)
generator, introduced by R.S. Wikramaratna~\cite{wikramaratna}, was originally designed
for use in geostatistical and geophysical Monte Carlo simulations, and later extended for
use on parallel computers.~\cite{ACORN}

\vspace{1em}

We define~\cite{ACORN} the $k$th order ACORN generator $X^k_j$ recursively
from a~seed $X^0_0$ (where \mbox{$0 < X^0_0 < M$} and $M=1,2,\dots$) and a~set of
$k$ initial values $X^m_0$ (where $m=1,\dots,k$ and $0 \le X^m_0 < M$) by:
\begin{equation}\label{eq:acorn}
    \begin{array}{ll}
        X^0_n = X^0_{n-1} & \for n \ge 1 \\[0.5em]
        X^m_n = (X^{m-1}_n + X^m_{n-1}) \bmod M & \for n \ge 1, m = 1,\dots,k
    \end{array}
\end{equation}

\begin{tcolorbox}
    The interested are encouraged to visit the official website \cite{ACORN}.
\end{tcolorbox}

\subsection{\textit{Mersenne Twister} (MT)}

It is by far the most widely used general-purpose PRNG. Its name derives from the fact
that its period length is chosen to be a Mersenne prime.

MT was developed in 1997 by Makoto Matsumoto and Takuji Nishimura
as a new variant of the \textit{twisted GFSR} (TGFSR)~\cite{tgfsr2}.

The most commonly used version of the Mersenne Twister algorithm is based on the Mersenne
prime $2^{19937}-1$. The standard implementation of that, MT19937, uses a 32-bit word length.

\begin{tcolorbox}
    Due to the size, the mathematical definition will be omitted. The interested are encouraged
    to read the original paper~\cite{matsumoto98} and to visit the official website~\cite{MT}.
\end{tcolorbox}

\subsection{\textit{Xorshift}}

Xorshift RNGs are a class of PRNGs discovered by George Marsaglia.~\cite{xor03}. They are
a~subset of LFSRs which allow a particularly efficient implementation in software without
using excessively sparse polynomials. They generate the next number in their sequence by
repeatedly taking the exclusive or of a number with a bit-shifted version of itself.

\begin{tcolorbox}
    The original paper \cite{xor03} does not contain a straightforward mathematical definition.
    The interested are encouraged to read also \cite{Panneton2005} and \cite{brent}.
    In place of mathematical definition an example based on the implementation provided
    by the original paper~\cite{xor03} will be presented.
\end{tcolorbox}

\begin{lstlisting}[language=C]
uint32_t xorshift32() {              |  uint32_t xorshift32() {
    static uint32_t x = 2463534242;  |      static uint32_t x = 2463534242;
    x ^= (x << a); x  = (x >> b);    |      x ^= (x << 13); x  = (x >> 17);
    return (x ^= (x << c));          |      return (x ^= (x << 5));
}                                    |  } // a,b,c = 13,17,5
\end{lstlisting}

\section{Own generator} \label{generator}

Without putting much thought into it let us make our generator to be a combination
of LCG, LFG and Xorshift.

First let us combine \eqref{eq:lcg} and \eqref{eq:lfg} into:
\begin{equation}\label{eq:my:step1}
    X_n = \big(a (X_{n-p} \ \Diamond\ X_{n-q}) + c\big) \mod m \quad \for n \ge p > q \ge 1
\end{equation}

Now we need to handle the $\Diamond$. Let it be $+$ for even $X_{n-q}$ and $\oplus$ for $X_{n-q}$ odd.
Thus \eqref{eq:my:step1} transforms into:
\begin{equation}\label{eq:my:step2}
    X_n = \left\{
    \begin{aligned}
        & \big(a (X_{n-p} + X_{n-q}) + c\big) \mod m \quad \for 2|X_{n-q} \\
        & \big(a (X_{n-p} \oplus X_{n-q}) + c\big) \mod m \quad \for 2 \nmid X_{n-q} \\
    \end{aligned} \right. \quad \for n \ge p > q \ge 1
\end{equation}

Let us use the Marsaglia's favourite values of Xorshift in \eqref{eq:my:step2} too (with $m=2^b$), thus:
\begin{equation}\label{eq:my:step3}
    X_n = \left\{
    \begin{aligned}
        & \big(13 (X_{n-p} + X_{n-q}) + 5\big) \mod 2^{17} \quad \for 2|X_{n-q} \\
        & \big(13 (X_{n-p} \oplus X_{n-q}) + 5\big) \mod 2^{17} \quad \for 2 \nmid X_{n-q} \\
    \end{aligned} \right. \quad \for n \ge p > q \ge 1
\end{equation}

The remaining variables are $p$ and $q$. Let $p=7$ and $q=3$, thus pre-final formula is:
\begin{equation}\label{eq:my:step4}
    X_n = \left\{
    \begin{aligned}
        & \big(13 (X_{n-7} + X_{n-3}) + 5\big) \mod 2^{17} \quad \for 2|X_{n-q} \\
        & \big(13 (X_{n-7} \oplus X_{n-3}) + 5\big) \mod 2^{17} \quad \for 2 \nmid X_{n-q} \\
    \end{aligned} \right. \quad \for n \ge 7
\end{equation}

Initial values will generate Xorshift with a ``twist'' that seed
$s \leftarrow s + (s \mod 1000) \cdot b$

\vspace{1em}

In the end the generator looks like:
\begin{equation}\label{eq:my}
    X_n = \left\{ \begin{array}{ll}
        \mathrm{Xorshift}(s + (s \mod 1000) \cdot b)
        & \quad \for n < 7
        \\[0.5em]
        \left. \begin{aligned}
            & \big(13 (X_{n-7} + X_{n-3}) + 5\big) \mod 2^{17} \quad \for 2|X_{n-q} \\[0.25em]
            & \big(13 (X_{n-7} \oplus X_{n-3}) + 5\big) \mod 2^{17} \quad \for 2 \nmid X_{n-q} \\
        \end{aligned} \right\} & \quad \for n \ge 7
    \end{array} \right.
\end{equation}

\section{Distributions} \label{distributions}
\subsection{Uniform}

As operation $\mod m$ is being used in our generator, thus none of random numbers $X$
will be greater than $m$. Thus to obtain an uniform distribution on interval $]0,1[$
we need to just divide the result of generator \eqref{eq:my} by value $m$.~\cite{taocp2}
\begin{equation}\label{eq:uniform}
    U_n = \frac{X_n}{m}
\end{equation}

\drawGraphs{uniform}

\subsection{Bernoulli}

Bernoulli distribution is a discrete probability distribution of a random variable which
takes the value 1 with probability $p$ and the value 0 with probability $1-p$.
We will use for this the previously defined uniform distribution \eqref{eq:uniform}.

\begin{equation}\label{eq:bernoulli}
    B_n(p) = \left\{ \begin{aligned}
        0 &\for U_n > p \\
        1 &\for U_n \le p
    \end{aligned} \right.
\end{equation}

\drawGraphs[bar width=40pt, xmin=-1, xmax=2]{bernoulli}
\vspace{-2em}
\[ p=0.6 \]

\subsection{Binomial}

Binomial distribution with parameters $p,K$ is the discrete probability distribution of
the number of successes in a sequence of $K$ Bernoulli trials \eqref{eq:bernoulli}.~\cite{skeptric}

\begin{equation}\label{eq:binomial}
    B'_n(p,k) = \sum_{i=1}^K B_i(p)
\end{equation}

\drawGraphs{binomial}
\vspace{-2em}
\[ p=0.5,\ K = 10 \]

\subsection{Poisson}

Knuth's algorithm~\cite{wiki:poisson_knuth, taocp2}
\begin{algorithmic}
    \STATE $L \gets \mathrm{e}^{-\lambda}$,\quad $k \gets 0$,\quad $p \gets 1$
    \REPEAT
    \STATE $k \gets k+1$
    \STATE $p \gets p \cdot u()$
    \qquad\COMMENT {\ where $u()$ returns uniform random number in $]0,1[$\ }
    \UNTIL {$p \le L$}
    \RETURN {$k-1$}
\end{algorithmic}

\drawGraphs[bar width=3pt]{poisson}

\subsection{Exponential}

To generate exponentially distributed number we will use yet again uniform one~\cite{se:so:uExp, aghRNG16}
\begin{equation}\label{eq:exponential}
    E_n(\lambda) = \frac{\ln(1-U_n)}{-\lambda}
\end{equation}

\drawGraphs[bar width=2pt]{exponential}

\subsection{Normal}

One of the commonly used methods to generate Gaussian-distributed numbers from a regular
random generator is Box-Muller transform.
The method uses two independent random numbers $U$ and $V$ distributed uniformly on $]0,1[$.
Then the two random variables $Y_1$ and $Y_2$
\begin{equation}\label{eq:box_muller}
    Y_1 = \sqrt{-2 \ln{U}} \cos{2\pi V}
    \qquad\qquad
    Y_2 = \sqrt{-2 \ln{U}} \sin{2\pi V}
\end{equation}
One is returned and the other saved for the next request for a random number.~\cite{se:so:normCpp}

\drawGraphs[bar width=2pt]{normal}

\section{Implementation in C++11}

Combining informations from sections \ref{generator} and \ref{distributions} to
write an implementation of our PRNG in C++11:

\vspace{2em}

\begin{lstlisting}[language=C++]
class PRNG {

    using base_type = uint32_t;
    base_type X[7]; // for convenience, 'p' is defined here as array size!
    std::size_t N;
    base_type a, b, c, m, p, q;
    double nextNormal;

public:

    PRNG(base_type seed = 2463534242) :
        N(sizeof(X)/sizeof(X[0])),
        a(13), b(20), c(5), m(1 << b), p(N), q(3),
        nextNormal(0)
    {
        seed += (seed % 1000) * b; // "twist"
        for (auto& x: X) { // Xorshift
            seed ^= (seed << a);
            seed  = (seed >> b);
            x = (seed ^= (seed << c));
        }
    }

    base_type operator ()()
    {
        auto P = (N-p) % p;
        auto Q = (N-q) % p;
        if (X[Q] % 2 == 0) {
            X[P] = (a*(X[P] + X[Q]) + c) % m;
        }
        else {
            X[P] = (a*(X[P] & X[Q]) + c) % m;
        }
        return X[P];
    }

    double uniform() { return static_cast<double>( (*this)() ) / m; }

    bool bernoulli(double P) { return uniform() <= P ? 1 : 0; }

    double exponential(double l) { return std::log(1 - uniform()) / -l; }

    std::size_t binomial(double P, std::size_t n)
    {
        auto val = 0;
        while (n--) {
            val += bernoulli(P);
        }
        return val;
    }

    base_type poisson(double l)
    {
        double L = std::exp(-l);
        base_type k = 0;
        double p = 1;
        do {
            ++k;
            p *= uniform();
        } while (p > L);
        return k-1;
    }

    double normal()
    {
        if (nextNormal != 0) {
            auto temp = nextNormal;
            nextNormal = 0;
            return temp;
        }
        auto r = std::sqrt(-2 * std::log(uniform()));
        auto s = 2 * M_PI * uniform();
        nextNormal = r * std::sin(s) + DBL_MIN;
        return r * std::cos(s);
    }

};
\end{lstlisting}

\section{Tests}
\subsection{Diehard}

$10^8$ samples ($\sim$6.6 GiB) in formatted~\cite{se:crypto:dieharder} data file.

Command: \texttt{dieharder -a -g 202 -f out/data/testing.dat}

Unfortunately, the generator seems to fail Dieharder tests.\\
Process has been manually terminated after 58th FAIL.

Generated output:

\begin{verbatim}
#=============================================================================#
#            dieharder version 3.31.1 Copyright 2003 Robert G. Brown          #
#=============================================================================#
   rng_name    |           filename             |rands/second|
     file_input|            out/data/testing.dat|  1.76e+06  |
#=============================================================================#
        test_name   |ntup| tsamples |psamples|  p-value |Assessment
#=============================================================================#
   diehard_birthdays|   0|       100|     100|0.00000000|  FAILED
      diehard_operm5|   0|   1000000|     100|0.00000000|  FAILED
  diehard_rank_32x32|   0|     40000|     100|0.00000000|  FAILED
    diehard_rank_6x8|   0|    100000|     100|0.00000000|  FAILED
   diehard_bitstream|   0|   2097152|     100|0.00000000|  FAILED
        diehard_opso|   0|   2097152|     100|0.00000000|  FAILED
        diehard_oqso|   0|   2097152|     100|0.00000000|  FAILED
         diehard_dna|   0|   2097152|     100|0.00000000|  FAILED
diehard_count_1s_str|   0|    256000|     100|0.00000000|  FAILED
diehard_count_1s_byt|   0|    256000|     100|0.00000000|  FAILED
 diehard_parking_lot|   0|     12000|     100|0.00000000|  FAILED
    diehard_2dsphere|   2|      8000|     100|0.00000000|  FAILED
    diehard_3dsphere|   3|      4000|     100|0.00000000|  FAILED
     diehard_squeeze|   0|    100000|     100|0.00000000|  FAILED
        diehard_sums|   0|       100|     100|0.00000000|  FAILED
        diehard_runs|   0|    100000|     100|0.00000000|  FAILED
        diehard_runs|   0|    100000|     100|0.00000000|  FAILED
       diehard_craps|   0|    200000|     100|0.00000000|  FAILED
       diehard_craps|   0|    200000|     100|0.00000000|  FAILED
 marsaglia_tsang_gcd|   0|  10000000|     100|0.00000000|  FAILED
 marsaglia_tsang_gcd|   0|  10000000|     100|0.00000000|  FAILED
         sts_monobit|   1|    100000|     100|0.00000000|  FAILED
            sts_runs|   2|    100000|     100|0.00000000|  FAILED
          sts_serial|   1|    100000|     100|0.00000000|  FAILED
          sts_serial|   2|    100000|     100|0.00000000|  FAILED
          sts_serial|   3|    100000|     100|0.00000000|  FAILED
          sts_serial|   3|    100000|     100|0.00000000|  FAILED
          sts_serial|   4|    100000|     100|0.00000000|  FAILED
          sts_serial|   4|    100000|     100|0.00000000|  FAILED
          sts_serial|   5|    100000|     100|0.00000000|  FAILED
          sts_serial|   5|    100000|     100|0.00000000|  FAILED
          sts_serial|   6|    100000|     100|0.00000000|  FAILED
          sts_serial|   6|    100000|     100|0.00000000|  FAILED
          sts_serial|   7|    100000|     100|0.00000000|  FAILED
          sts_serial|   7|    100000|     100|0.00000000|  FAILED
          sts_serial|   8|    100000|     100|0.00000000|  FAILED
          sts_serial|   8|    100000|     100|0.00000000|  FAILED
          sts_serial|   9|    100000|     100|0.00000000|  FAILED
          sts_serial|   9|    100000|     100|0.00000000|  FAILED
          sts_serial|  10|    100000|     100|0.00000000|  FAILED
          sts_serial|  10|    100000|     100|0.00000000|  FAILED
          sts_serial|  11|    100000|     100|0.00000000|  FAILED
          sts_serial|  11|    100000|     100|0.00000000|  FAILED
          sts_serial|  12|    100000|     100|0.00000000|  FAILED
          sts_serial|  12|    100000|     100|0.00000000|  FAILED
          sts_serial|  13|    100000|     100|0.00000000|  FAILED
          sts_serial|  13|    100000|     100|0.00000000|  FAILED
          sts_serial|  14|    100000|     100|0.00000000|  FAILED
          sts_serial|  14|    100000|     100|0.00000000|  FAILED
          sts_serial|  15|    100000|     100|0.00000000|  FAILED
          sts_serial|  15|    100000|     100|0.00000000|  FAILED
          sts_serial|  16|    100000|     100|0.00000000|  FAILED
          sts_serial|  16|    100000|     100|0.00000000|  FAILED
         rgb_bitdist|   1|    100000|     100|0.00000000|  FAILED
         rgb_bitdist|   2|    100000|     100|0.00000000|  FAILED
         rgb_bitdist|   3|    100000|     100|0.00000000|  FAILED
         rgb_bitdist|   4|    100000|     100|0.00000000|  FAILED
         rgb_bitdist|   5|    100000|     100|0.00000000|  FAILED
\end{verbatim}
\subsection{ENT}

ENT~\cite{ent} program, although not ideal for the given input, yelds much more
interesting results:

\begin{verbatim}
Entropy = 3.524750 bits per byte.

Optimum compression would reduce the size
of this 7000000207 byte file by 55 percent.

Chi square distribution for 7000000207 samples is 156174869624.00, and randomly
would exceed this value less than 0.01 percent of the times.

Arithmetic mean value of data bytes is 43.7601 (127.5 = random).
Monte Carlo value for Pi is 4.000000000 (error 27.32 percent).
Serial correlation coefficient is 0.117267 (totally uncorrelated = 0.0).
\end{verbatim}

\subsection{Visual test}

\begin{multicols}{2}
    \includegraphics[width=0.4\textwidth]{out/data/test.eps}

    This test brutally shows whats wrong with our generator.
    It has pattern: numbers alternate between even and odd.
    The first 10 numbers:
    \begin{verbatim}
    18431
    82898
    3465
    19412
    95651
    38182
    77517
    64584
    27527
    7007
    \end{verbatim}
\end{multicols}

\section{Conclusions}

Despite succeeding at creating all desired distributions, we ultimately failed at creating
proper pseudorandom number generator. Although on the first glance numbers could appear
plausible, it took to our third test -- ironically, visual one -- to discover its fatal
flaw. It just shows that pseudorandomness is no trivial matter and even the simplest
algorithms actually have a lot of thought put behind them.

\section*{} % Bibliography

\clearpage

\nocite{dieharder}
\nocite{leemis}
\nocite{payne69}
\nocite{randomOrgVis}
\nocite{se:mo:prngAlg}
\nocite{se:so:testing}
\nocite{viega2003}
\nocite{wiki:PRNG}
\nocite{wiley2018}

\printbibliography[heading=bibintoc]

\section*{Source code}

All source files (LaTeX, BibTeX, C++, Makefile) are available on GitHub under the
URL:\\ \url{https://github.com/Jorengarenar/PRNG-paper}

\end{document}

% vim: ts=4
