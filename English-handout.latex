% ################### Handout to presentation for English spoken exam ###################

\documentclass[12pt]{article}

\usepackage[a4paper, vmargin=0pt, hmargin=50pt]{geometry}
\usepackage{hyperref}

\usepackage{titling}
\posttitle{\par\end{center}}
\setlength{\droptitle}{-3em}

\usepackage{filecontents}
\begin{filecontents}[overwrite]{references.bib}
   @article{Knuth,
      author = {Knuth, Donald E.},
      title = {Structured Programming with Go to Statements},
      year = {1974},
      issue_date = {Dec. 1974},
      publisher = {Association for Computing Machinery},
      address = {New York, NY, USA},
      volume = {6},
      number = {4},
      issn = {0360-0300},
      url = {https://doi.org/10.1145/356635.356640},
      doi = {10.1145/356635.356640},
      journal = {ACM Comput. Surv.},
      month = {dec},
      pages = {261–301},
      numpages = {41}
   }

   @article{Dijkstra,
      author = {Dijkstra, Edsger W.},
      title = {Letters to the Editor: Go to Statement Considered Harmful},
      year = {1968},
      publisher = {Association for Computing Machinery},
      address = {New York, NY, USA},
      volume = {11},
      number = {3},
      issn = {0001-0782},
      url = {https://doi.org/10.1145/362929.362947},
      doi = {10.1145/362929.362947},
      journal = {Commun. ACM},
      month = {mar},
      pages = {147–148},
      numpages = {2},
      keywords = {conditional clause, go to statement, repetitive clause, branch instruction, alternative clause, program sequencing, jump instruction, program intelligibility}
   }

   @standard{C99,
      author = {ISO},
      title = {ISO/IEC 9899: Programming languages – C},
      editor = {ISO Working Group 14 (1999)},
      note = {Draft standard WG14/N1256, the combined C99 + TC1 + TC2 + TC3 (September 7, 2007)},
      address = {Geneva, Switzerland},
      timestamp = {2007-11},
      year = {1999},
      keywords = {C C99 ISO standard},
      url = {https://www.open-std.org/jtc1/sc22/wg14/www/docs/n1256.pdf},
   }

   @article{10.1145/355604.361591,
      author = {Dijkstra, Edsger W.},
      title = {The Humble Programmer},
      year = {1972},
      issue_date = {Oct. 1972},
      publisher = {Association for Computing Machinery},
      address = {New York, NY, USA},
      volume = {15},
      number = {10},
      issn = {0001-0782},
      url = {https://doi.org/10.1145/355604.361591},
      doi = {10.1145/355604.361591},
      journal = {Commun. ACM},
      month = {oct},
      pages = {859–866},
      numpages = {8}
   }
\end{filecontents}

\usepackage[
    backend=bibtex,
    urldate=iso,
    date=iso,
    natbib=true,
    style=alphabetic,
]{biblatex}
\addbibresource{references.bib}

\setlength{\parskip}{0.7em}
\setlength{\parindent}{0em}

\title{%
   \huge Proper usage of \texttt{goto} statement in C language \\
   \large based on: \citetitle{Knuth} \cite{Knuth} }
\author{%
   \\\vspace{-3em}\\
   \LARGE Jakub Łukasiewicz\\
   \\\vspace{-2em}\\
   Computer Science}
\date{2022-09-24}

\begin{document}

\maketitle

\begin{enumerate}
   \item What is \texttt{goto}?
   \item Times of Assembly and BASIC
   \item Debate: From \textbf{Dijkstra in 1968} \cite{Dijkstra} to \textbf{Knuth in 1974} \cite{Knuth}
   \item "Utopia 84"
   \item Using \texttt{goto} in C
      \begin{enumerate}
         \item Error handling \\
            {\footnotesize \textbf{Alternatives:} arrow anti-pattern, early returns, flags, separate functions, abuse of \texttt{do \{\} while}}
         \item Restart
         \item Pseudo fallthrough in switch statements
         \item Jumping into event loop
         \item Nested loop break
         \item Simple state machines
         \item Optimizations
      \end{enumerate}
   \item Future
   \item Conclusions
\end{enumerate}

\nocite{*}
\printbibliography

\end{document}

% ---------------------------------------- SCRIPT ----------------------------------------
%
% Before anything else, we need to answer a question what a `goto` is to begin with.
% Let's assume this handout is a program and this is the list of instruction it needs
% to execute. As we can see, point 5 we have `goto (in) C`. So what do we do?  We go to
% the label C, of course.  That's what `goto` is: an command to jump to other part of code.
% So we skipped all the instruction between `goto` and label C... one of which was
% "Error handling"...  That's not good. Why, that's very, very bad. Error handling
% is important! We cannot just skip it! Yes, that's a big problem with `goto` - jumping
% into arbitrary places.
%
% And now imagine, 60s and 70s - the linguae francae of programming are low-level Assembly
% and for high-level is... BASIC, which is, nomen omen, a very basic language. So basic
% it doesn't even have proper loops nor procedures - half of the code written in BASIC
% was jumping from one line to another with `GOTO` statements.
%
% That's why those decades gave birth to whole new approach: structural programming.
% Perhaps the best remembered from the surrounding debate were papers by Dijkstra and Knuth.
%
% In 1968 Edsger Dijkstra submitted a short article, which his editor deemed so important,
% to publish it faster, they omitted typical process and printed it as a letter titled
% "Go to Statement Considered Harmful".
% Author took quite radical stance calling to abolish `goto` altogether from all
% higher-level languages. His famous lecture "The Humble Programmer" only helped the cause.
% The structured programming revolution has took place.
%
% In opposition to Dijkstra stood another brilliant computer scientist - Donald Knuth.
% Paper, on which I based this presentation, is titled "Structured Programming with
% Go to Statements". Knuth argued there are situations where `goto` is the best choice
% and makes code simpler.
%
% He also wonders, if the next lingua franca (or whole family of languages?) will
% have `goto`. For the sake of speculations, he called it "Utopia 84" and I must admit,
% the accuracy is almost scary for the 80s were a decade when C programming language
% risen into power. And this language is indeed our current lingua franca of programming
% and also a base of most popular languages in use today.
%
% Though almost half a century has passed since the publication, the cases when
% `goto` statement is right tool for the job still exist. Let's have a look at them.
%
%                                   [describe use-cases]
%
% The future of goto can be summarized by one sentence:
% For as long as C language remains in power, `goto` will exists in programmers consciousness.
% There rather isn't more to dwell about here.
%
% Thus, as the conclusion for the whole presentation,
% allow me to judge who won the debate: Dijkstra or Knuth?
% The answer is: both, both of them. `goto` really had declined in use,
% most latest languages use some euphemism of lesser power, just as Dijkstra wished.
% Knuth on the other hand proven there is place for `goto` even in modern programs.
