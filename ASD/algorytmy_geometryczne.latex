\documentclass[12pt,oneside]{book}

\usepackage[a4paper, vmargin=20pt, hmargin=50pt, head=16pt, includehead]{geometry}
\usepackage[inline]{enumitem}
\usepackage{amsmath}     % math
\usepackage{amssymb}     % math symbols
\usepackage{enumitem}    % enumerate/list items
\usepackage{fancyhdr}    % header
\usepackage{fancyvrb}
\usepackage{mathtools}   % math tools
\usepackage{pgfplots}    % graphs
\usepackage{soul}
\usepackage{stackengine} % stacking objects vertically
\usepackage{titlesec}    % alternative section titles

\usepgfplotslibrary{fillbetween}
\usetikzlibrary{positioning}

\newcommand{\Because}{\quad\because\quad}
\newcommand{\Land}{\quad\land\quad}

\renewcommand{\ge}{\geqslant}
\renewcommand{\le}{\leqslant}
\DeclareMathOperator{\for}{\ \leftrightarrow\ }

\titleformat{\section}{\normalfont\Large\bfseries}{}{0pt}{} % remove section numbering

\titleformat{\chapter}[display]{\normalfont\Huge\bfseries\centering}{}{0pt}{}

\setlength{\parskip}{0.7em}
\setlength{\parindent}{0em}

\pagestyle{fancy}
\chead{Algorytmy geometryczne}

\begin{document}

Algorytmy geometryczne - synonimiczne z geometrią obliczeniową - mają istotne znaczenie
w wielu dziedzinach informatyki i inżynierii, takich jak grafika komputerowa, robotyka,
symulacje komputerowe, bazy danych, projektowanie wspomagane komputerowo.

Przykładowe problemy rozważane w tej dziedzinie:
\begin{itemize}[nosep]
   \item wyznaczanie pary najbliższych lub najdalszych punktów
   \item wykrywanie kolizji
   \item wyznaczanie otoczki wypukłej
   \item przecięcia wielokątów, wieloboków, prostokątów, prostych (w tym stwierdzenie faktu przecięcia, wyznaczenie punktów przecięć, realizacja operacji boolowskich)
   \item wyszukiwanie geometryczne - które obiekty, np.\ punkty, odcinki, leżą wewnątrz prostokąta, okręgu itp.
   \item planowanie ruchu robota
   \item odtwarzanie powierzchni z chmury punktów
\end{itemize}

\section*{Wybrane problemy}
\subsection*{Względne położenie punktów}

Mamy trzy punkty $P = (x,y)$, $Q = (x',y')$, $R = (x'',y'')$.
Niech $
\det(P,Q,R) := \det \begin{bmatrix}
   x   & y   & 1 \\
   x'  & y'  & 1 \\
   x'' & y'' & 1
\end{bmatrix}
$.

\begin{itemize}
   \item $\det(P,Q,R) > 0 \implies$ punkt $R$ jest po \textit{lewej} wektora $\overrightarrow{PQ}$
   \item $\det(P,Q,R) < 0 \implies$ punkt $R$ jest po \textit{prawej} wektora $\overrightarrow{PQ}$
   \item $\det(P,Q,R) = 0 \implies$ punkty $P,Q,R$ są współliniowe
\end{itemize}

Możemy to wykorzystać między innymi do sprawdzenia:
\begin{itemize}[nosep]
   \item czy punkty $p_1$ i $p_2$ leżą po tej samej stronie prostej $p-q$ %\\ $sgn(det(p,q,p_1)) = sgn(det(p,q,p_2))$
   \item czy punkt $r$ należy do odcinka $p-q$
   \item czy odcinki $p-q$ i $r-s$ przecinają się
\end{itemize}

\subsection*{Kąt nachylenia wektora wodzącego}

\begin{equation*}
   \mathrm{alfa}(x,y) = \begin{dcases}
      \hfill     \frac{y}{d}   & \for \ x \ge 0 \Land y \ge 0 \\[1ex]
      \hfill 2 - \frac{y}{d}   & \for \ x \le 0 \Land y \ge 0 \\[1ex]
      \hfill 2 + \frac{|y|}{d} & \for \ x \le 0 \Land y \le 0 \\[1ex]
      \hfill 4 - \frac{|y|}{d} & \for \ x \ge 0 \Land y < 0   \\
   \end{dcases},
   \text{\qquad gdzie \quad} d = |x| + |y|
\end{equation*}

\subsection*{Przynależność punktu do wielokąta}

Punkt $P$ leży wewnątrz dowolnego wielokąta $W$ jeżeli istnieje półprosta $l$ o początku w tym punkcie,
która przecina boki wielokąta nieparzystą liczbę razy. Jeżeli do półprostej należy wierzchołek $w_i$ wielokąta $W$ to wówczas:
\begin{enumerate}[nosep]
      \setlist[enumerate]{label*=\arabic*.}
   \item Wybieramy inny punkt $w_i' \in l$
   \item Sprawdzamy $\det(w_{i-1},w_i,w_i') \cdot \det(w_i, w_i', w_{i+1}) > 0$
      \begin{enumerate}[nosep]
         \item Jeżeli to prawda, to sąsiadujące z $w_i$ wierzchołki $w_{i-1}$ i $w_{i+1}$ znajdują się po tej samej stronie półprostej $l$ i nie wliczamy ich do liczby punktów przecięcia
         \item W przeciwnym razie znajdują się po przeciwnych stronach i dodajemy 1 do liczby punktów przecięcia
      \end{enumerate}
\end{enumerate}
Analogicznie postępujemy, gdy krawędź $w_i - w_{i+1}$ należy do półprostej $l$, tylko wówczas nie trzeba tworzyć wierzchołka $w_i' \in l$ $l$.


\subsection*{Wypukła otoczka}

Otoczką wypukłą danego zbioru punktów nazywamy taki wielokąt wypukły, że wszystkie te
punkty zawierają się w jego wnętrzu lub obrzeżach.

Jednym z efektywnych algorytmów wyszukiwania otoczki wypukłej skończonego zbioru
punktów płaszczyzny (nie istnieją warianty dla przestrzeni o wyższych wymiarach)
jest \textbf{algorytm Grahama}. \
Znajduje on nie tylko zbiór wierzchołków wielokąta tworzącego otoczkę, ale także
podaje kolejność, w jakiej te wierzchołki występują na obwodzie wielokąta.

\begin{samepage}
   Metoda zastosowana w algorytmie korzysta z trzech obserwacji:
   \begin{itemize}[nosep]
      \item punkt $O$, taki który ma najmniejszą współrzędną $y$ (leżący najniżej), a jeżeli jest ich wiele to taki, który dodatkowo ma najmniejszą współrzędną $x$, musi być wierzchołkiem otoczki wypukłej,
      \item jeśli uporządkujemy wszystkie punkty ze względu na kąt jaki tworzy  wektor $\overrightarrow{OP}$ z dodatnim kierunkiem osi $X$, to kolejność wybierania wierzchołków będzie odpowiadała ich kolejności na obwodzie budowanego wielokąta,
      \item jeśli mamy już zbudowaną otoczkę wypukłą zbioru $Q$, to wszystkie pozostałe punkty zbioru $Q$ leżą po lewej stronie każdej krawędzi otoczki, jeśli przesuwamy się po niej w kierunku przeciwnym do ruchu wskazówek zegara.
   \end{itemize}
\end{samepage}

\textbf{Algorytm:}
\begin{enumerate}[nosep]
      \setlist[enumerate]{label*=\arabic*.}
   \item Wybierz punkt $S$ o najmniejszej współrzędnej $y$ (jeśli kilka punktów ma tę
      samą współrzędną $y$, wybierz spośród nich ten o najmniejszej współrzędnej $x$).
   \item Niech punkt $S$ będzie początkiem układu współrzędnych
   \item Posortuj listę punktów leksykograficznie względem:
      \begin{itemize}[nosep]
         \item kąta pomiędzy wektorem $\overrightarrow{SP_i}$ a dodatnią osią układu współrzędnych
         \item odległości punktu $P_i$ od początku układu współrzędnych
      \end{itemize}
   \item Przeglądaj listę posortowanych punktów poczynając od punktu $S$:
      \begin{enumerate}[nosep]
         \item Od bieżącej pozycji weź trzy kolejne punkty $P_{i-1}, P_i, P_{i+1}$
         \item Jeśli $\det(P_{i-1},P_i,P_{i+1}) < 0$ to usuń punkt $P_i$ z otoczki i cofnij się pozycję wstecz.
         \item Jeśli $\det(P_{i-1},P_i,P_{i+1}) \ge 0$ to badamy kolejną trójkę punktów $P_i, P_{i+1}, P_{i+2}$
      \end{enumerate}
\end{enumerate}

\section*{Zadania tablicowe}
\begin{itemize}
   \item Porównaj kąty nachylenia wektorów wodzących punktów $(0,4)$, $(1,1)$, $(3,2)$, $(-1,1)$ względem osi $X$ bez obliczania tych kątów.
   \item Udowodnij, że kąt nachylenia wektora wodzącego punktu $(x_1, y_1)$ jest mniejszy lub równy kątowi nachylenia wektora wodzącego punktu $(x_2, y_2)$ $\Leftrightarrow$ gdy $alfa(x_1, y_1) \leqslant alfa(x_2, y_2)$.
   \item  Jaka jest złożoność pesymistyczna przedstawionego powyżej algorytmu Grahama wyszukiwania otoczki wypukłej?
\end{itemize}

\clearpage
\section*{Zadanie programistyczne: znalezienie otoczki wypukłej}

Napisz program, który dla podanych na wejściu punktów wypisze wierzchołki otoczki wypukłej

\textbf{Przykłady}\\
{\footnotesize (punkty połączone czerwoną linią to otoczka wypukła)}

\begin{figure}[h!]
   \centering
   \begin{tikzpicture}[x=0.9cm,y=0.9cm]
      \draw[latex-latex, thin, draw=gray] (-1,0)--(7,0) node [right] {$x$};
      \draw[latex-latex, thin, draw=gray] (0,-1)--(0,7) node [above] {$y$};
      \foreach \Point in {(3, 2), (2, 5), (5, 6), (4, 4), (6, 4)}{
         \node at \Point [circle,fill,inner sep=1pt] {};
         \node at \Point [anchor=south east] {\small\Point};
      }
      \draw [red] (3, 2) -- (2, 5) -- (5, 6) -- (6, 4) -- cycle;
   \end{tikzpicture}
\end{figure}

\begin{figure}[h!]
   \centering
   \begin{tikzpicture}[x=0.77cm,y=0.77cm]
      \draw[latex-latex, thin, draw=gray] (-9,0)--(12,0) node [right] {$x$};
      \draw[latex-latex, thin, draw=gray] (0,-1)--(0,16) node [above] {$y$};
      \foreach \Point in {(0, 0), (10, 3), (11, 8), (2, 11), (1, 8), (8, 5), (9, 13),(-2, 15), (5, 14), (-8, 6), (8, 10), (-1, 10), (-4, 9)}{
         \node at \Point [circle,fill,inner sep=1pt] {};
         \node at \Point [anchor=south east] {\small\Point};
      }
      \draw [red] (0, 0) -- (10, 3) -- (11, 8) -- (9, 13) -- (5, 14) -- (-2, 15) -- (-8, 6) -- cycle;
   \end{tikzpicture}
\end{figure}

\end{document}

% vim: spl=pl
